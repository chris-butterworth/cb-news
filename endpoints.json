{
	"GET /api": {
		"description": "serves up a json representation of all the available endpoints of the api"
	},
	"GET /api/topics": {
		"description": "serves an array of all topics",
		"queries": [],
		"exampleResponse": {
			"topics": [{ "slug": "cats", "description": "meow" }]
		}
	},
	"GET /api/articles": {
		"description": "serves an array of all articles",
		"queries": ["topic", "sort_by", "order"],
		"exampleResponse": {
			"articles": [
				{
					"title": "article title",
					"topic": "cats",
					"author": "user1",
					"body": "article text",
					"created_at": "2018-05-30T15:59:13.341Z",
					"votes": 0,
					"comment_count": 0,
					"article_img_url": "imageUrl"
				}
			]
		}
	},
	"GET /api/articles/:article_id": {
		"description": "serves an array containing a single article by id",
		"queries": [],
		"exampleResponse": {
			"title": "article title",
			"topic": "cats",
			"author": "user1",
			"body": "article text",
			"created_at": "2018-05-30T15:59:13.341Z",
			"votes": 0,
			"comment_count": 0,
			"article_img_url": "imageUrl"
		}
	},
	"PATCH /api/articles/:article_id": {
		"description": "modify the vote count on an existing article. Positive and negative integers are allowed",
		"expectedInput": { "inc_votes": 1 },
		"exampleResponse": {
			"title": "article title",
			"topic": "cats",
			"author": "user1",
			"body": "article text",
			"created_at": "2018-05-30T15:59:13.341Z",
			"votes": 0,
			"comment_count": 0,
			"article_img_url": "imageUrl"
		}
	},
	"GET /api/articles/article_id/comments": {
		"description": "serves an array containing all comments for a specified article_id sorted by date in descending order",
		"queries": [],
		"exampleResponse": {
			"comments": [
				{
					"title": "article title",
					"topic": "cats",
					"author": "user1",
					"body": "article text",
					"created_at": "2018-05-30T15:59:13.341Z",
					"votes": 0,
					"comment_count": 0,
					"article_img_url": "imageUrl"
				}
			]
		}
	},
	"POST /api/articles/:article_id/comments": {
		"description": "posts a new comment to the given article, returns the posted comment",
		"expectedInput": {
			"username": "username 1",
			"body": "comment text"
		},
		"exampleResponse": {
			"comment_id": "20",
			"article_id": 2,
			"votes": "0",
			"author": "username 1",
			"body": "comment text",
			"created_at": "2018-05-30T15:59:13.341Z"
		}
	},
	"DELETE /api/comments/:comment_id": {
		"description": "deletes a comment from the database"
	},
	"GET /api/users": {
		"description": "serves an array of all users",
		"queries": [],
		"exampleResponse": {
			"topics": [
				{
					"username": "butter_bridge",
					"name": "jonny",
					"avatar_url": "imageUrl"
				}
			]
		}
	}
}
